{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","changeDarkModeColor","style","backgroundColor","toggleMode","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","color","heading","background","value","rows","onChange","event","target","newText","showAlert","replace","document","getElementById","select","navigator","clipboard","writeText","length","split","App","setMode","_useState3","_useState4","setAlert","_useState5","_useState6","intervalId","setintervalId","message","clearTimeout","interval","setTimeout","colorPalettes","getElementsByClassName","buttons","getElementsByTagName","body","Array","from","forEach","display","button","borderColor","bodybackgroundColor","buttonsbodybackgroundColor","containers","container","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.41f7ca4a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n             <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className=\"color-palette mx-2\" onClick={()=>props.changeDarkModeColor('#042743','blue')} style={{backgroundColor:'#042743'}} ></div>\r\n          <div className=\"color-palette mx-2\" onClick={()=>props.changeDarkModeColor('#062925','#2a4242')} style={{backgroundColor:'#062925'}} ></div>\r\n          <div className=\"color-palette mx-2\" onClick={()=>props.changeDarkModeColor('black','#BB86FC')} style={{backgroundColor:'black'}} ></div>\r\n\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  aria-checked=\"true\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string };\r\n\r\n// Navbar.defaultProps = { title: 'Set title here', aboutText: 'About text here' };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert('Converted to uppercase!','success');\r\n  };\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert('Converted to lowercase!','success');\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handleClearClick = () => {\r\n    setText('');\r\n    props.showAlert('Text cleared!','success');\r\n  };\r\n  const handleRemoveExtraSpaceClick = () => {\r\n    setText(text.replace(/\\s(?!\\w)/g,''));\r\n    props.showAlert('Extra spaces removed!','success');\r\n  };\r\n  const handleCopy = () => {\r\n    var text = document.getElementById('myBox');\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert('Copied to clipboard!','success');\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter text here\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-3\"  style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            style={{background:props.mode==='dark'?'#160c14':'white',\r\n            color:props.mode==='dark'?'white':'black'}}\r\n            id=\"myBox\"\r\n            value={text}\r\n            rows=\"8\"\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary \" onClick={handleUpClick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2  my-2\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2  my-2\" onClick={handleClearClick}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2  my-2\" onClick={handleRemoveExtraSpaceClick}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2  my-2\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.length === 0 ? 0 : text[0] === ' ' ? setText(''): text.split(/\\s(?=\\w)/).length} words and{\" \"}\r\n          {text.length} characters\r\n        </p>\r\n        {/* An avg reader takes 0.008 minutes to read one word */}\r\n        <p>\r\n          {text.length === 0\r\n            ? 0 * 0.008\r\n            : text.split(/\\s(?=\\w)/).length * 0.008}{\" \"}\r\n          Minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:'Enter something in the text box above to preview it here'}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');  //Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const [intervalId, setintervalId] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    clearTimeout(intervalId);\n    var interval = setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n    setintervalId(interval);\n  }\n\n\n  const toggleMode = () => {\n    let colorPalettes = document.getElementsByClassName('color-palette');\n    let buttons = document.getElementsByTagName('button');\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      Array.from(colorPalettes).forEach(colorPalettes => colorPalettes.style.display = 'block');\n      showAlert('Dark mode has been enable', 'success');\n      document.title = 'TextUtils - Dark Mode';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      Array.from(colorPalettes).forEach(colorPalettes => colorPalettes.style.display = 'none');\n      Array.from(buttons).forEach((button) => {\n        button.style.backgroundColor = '#0d6efd';\n        button.style.borderColor = '#0d6efd';\n      });\n      showAlert('Light mode has been enable', 'success');\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  const changeDarkModeColor = (bodybackgroundColor, buttonsbodybackgroundColor) => {\n    document.body.style.backgroundColor = bodybackgroundColor;\n    let buttons = document.getElementsByTagName('button');\n    let containers = document.getElementsByClassName('container');\n    Array.from(buttons).forEach((button) => {\n      button.style.backgroundColor = buttonsbodybackgroundColor;\n      button.style.borderColor = buttonsbodybackgroundColor;\n    });\n    Array.from(containers).forEach((container) => container.style.color = 'white');\n  }\n\n  return (\n    <>\n        <Navbar title='TextUtils' aboutText='About TextUtils' mode={mode} toggleMode={toggleMode} changeDarkModeColor={changeDarkModeColor} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n              <TextForm showAlert={showAlert} heading=\"Enter The text to analyze below\" mode={mode} />\n        </div>\n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}