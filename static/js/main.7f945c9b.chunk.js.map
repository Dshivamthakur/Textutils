{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","React","createElement","style","height","alert","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","changeDarkModeColor","backgroundColor","toggleMode","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","color","heading","background","value","rows","onChange","event","target","disabled","length","newText","showAlert","replace","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","App","setMode","_useState3","_useState4","setAlert","_useState5","_useState6","intervalId","setintervalId","message","clearTimeout","interval","setTimeout","colorPalettes","getElementsByClassName","buttons","AboutButtons","body","Array","from","forEach","display","button","borderColor","bodybackgroundColor","buttonsbodybackgroundColor","AboutButtonsBackgroundColor","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.7f945c9b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n            {\r\n                props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n           </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className=\"color-palette mx-2\" onClick={()=>props.changeDarkModeColor('#042743','blue','#449ee6')} style={{backgroundColor:'#042743'}} ></div>\r\n          <div className=\"color-palette mx-2\" onClick={()=>props.changeDarkModeColor('#062925','#2a4242','#068879')} style={{backgroundColor:'#062925'}} ></div>\r\n          <div className=\"color-palette mx-2\" onClick={()=>props.changeDarkModeColor('black','#BB86FC','#bb86fce0')} style={{backgroundColor:'black'}} ></div>\r\n\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  aria-checked=\"true\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string };\r\n\r\n// Navbar.defaultProps = { title: 'Set title here', aboutText: 'About text here' };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert('Converted to uppercase!','success');\r\n  };\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert('Converted to lowercase!','success');\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handleClearClick = () => {\r\n    setText('');\r\n    props.showAlert('Text cleared!','success');\r\n  };\r\n  const handleRemoveExtraSpaceClick = () => {\r\n    setText(text.replace(/\\s(?!\\w)/g,''));\r\n    props.showAlert('Extra spaces removed!','success');\r\n  };\r\n  const handleCopy = () => {\r\n    var text = document.getElementById('myBox');\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    document.getSelection().removeAllRanges();\r\n    props.showAlert('Copied to clipboard!','success');\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter text here\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-3\"  style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            style={{background:props.mode==='dark'?'#160c14':'white',\r\n            color:props.mode==='dark'?'white':'black'}}\r\n            id=\"myBox\"\r\n            value={text}\r\n            rows=\"8\"\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n        </div>\r\n        <button disabled = {text.length === 0} className=\"btn btn-primary mx-1  my-1 ChangeColors\" onClick={handleUpClick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button disabled = {text.length === 0} className=\"btn btn-primary mx-1  my-1 ChangeColors\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button disabled = {text.length === 0} className=\"btn btn-primary mx-1  my-1 ChangeColors\" onClick={handleClearClick}>\r\n          Clear\r\n        </button>\r\n        <button disabled = {text.length === 0} className=\"btn btn-primary mx-1  my-1 ChangeColors\" onClick={handleRemoveExtraSpaceClick}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button disabled = {text.length === 0} className=\"btn btn-primary mx-1  my-1 ChangeColors\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button> \r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.length === 0 ? 0 : text[0] === ' ' ? setText(''): text.split(/\\s(?=\\w)/).length} words and{\" \"}\r\n          {text.length} characters\r\n        </p>\r\n        {/* An avg reader takes 0.008 minutes to read one word */}\r\n        <p>\r\n          {text.length === 0\r\n            ? 0 * 0.008\r\n            : text.split(/\\s(?=\\w)/).length * 0.008}{\" \"}\r\n          Minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:'Enter something in the text box above to preview it here'}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');  //Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const [intervalId, setintervalId] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    clearTimeout(intervalId);\n    var interval = setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n    setintervalId(interval);\n  }\n\n\n  const toggleMode = () => {\n    let colorPalettes = document.getElementsByClassName('color-palette');\n    let buttons = document.getElementsByClassName('ChangeColors');\n    let AboutButtons = document.getElementsByClassName('accordion-button');\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      Array.from(colorPalettes).forEach(colorPalettes => colorPalettes.style.display = 'block');\n      Array.from(AboutButtons).forEach((button) => {\n        button.style.backgroundColor = \"#449ee6\";\n      });\n      showAlert('Dark mode has been enable', 'success');\n      // document.title = 'TextUtils - Dark Mode';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      Array.from(colorPalettes).forEach(colorPalettes => colorPalettes.style.display = 'none');\n      Array.from(buttons).forEach((button) => {\n        button.style.backgroundColor = '#0d6efd';\n        button.style.borderColor = '#0d6efd';\n      });\n      Array.from(AboutButtons).forEach((button) => {\n        button.style.backgroundColor = \"white\";\n      });\n      showAlert('Light mode has been enable', 'success');\n      // document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  const changeDarkModeColor = (bodybackgroundColor, buttonsbodybackgroundColor,AboutButtonsBackgroundColor) => {\n    document.body.style.backgroundColor = bodybackgroundColor;\n    let buttons = document.getElementsByClassName('ChangeColors');\n    let AboutButtons = document.getElementsByClassName('accordion-button');\n    Array.from(buttons).forEach((button) => {\n      button.style.backgroundColor = buttonsbodybackgroundColor;\n      button.style.borderColor = buttonsbodybackgroundColor;\n    });\n    Array.from(AboutButtons).forEach((button) => {\n      button.style.backgroundColor = AboutButtonsBackgroundColor;\n    });\n  }\n\n  return (\n    <>\n        <Navbar title='TextUtils' aboutText='About TextUtils' mode={mode} toggleMode={toggleMode} changeDarkModeColor={changeDarkModeColor} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n              <TextForm showAlert={showAlert} heading=\"Try TextUtils - Word Counter, Character Counter, \n              Remove extra spaces\" mode={mode} />\n              {/* <About mode={mode}/> */}\n        </div>\n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}